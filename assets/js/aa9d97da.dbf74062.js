"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[979],{1565:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"core-concepts/configuration-management","title":"Configuration Management","description":"Orkestra provides a robust configuration system that allows you to define, validate, and manage application settings. This guide covers all aspects of the configuration system.","source":"@site/docs/core-concepts/configuration-management.md","sourceDirName":"core-concepts","slug":"/core-concepts/configuration-management","permalink":"/docs/core-concepts/configuration-management","draft":false,"unlisted":false,"editUrl":"https://github.com/Luc-cpl/orkestra/tree/main/docs/docs/core-concepts/configuration-management.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Dependency Injection","permalink":"/docs/core-concepts/dependency-injection"},"next":{"title":"API Development","permalink":"/docs/guides/api"}}');var t=i(4848),o=i(8453);const s={sidebar_position:3},r="Configuration Management",l={},c=[{value:"Configuration Basics",id:"configuration-basics",level:2},{value:"Setting and Getting Values",id:"setting-and-getting-values",level:3},{value:"Configuration Definitions",id:"configuration-definitions",level:2},{value:"Accessing Default Values",id:"accessing-default-values",level:3},{value:"Required Values",id:"required-values",level:3},{value:"Working with Complex Values",id:"working-with-complex-values",level:2},{value:"Configuration Validation",id:"configuration-validation",level:2},{value:"Custom Validators",id:"custom-validators",level:3},{value:"Validation on Boot",id:"validation-on-boot",level:3},{value:"Advanced Configuration Patterns",id:"advanced-configuration-patterns",level:2},{value:"Environment-Specific Configuration",id:"environment-specific-configuration",level:3},{value:"Organization of Complex Configuration",id:"organization-of-complex-configuration",level:3},{value:"Common Error Cases and Troubleshooting",id:"common-error-cases-and-troubleshooting",level:2},{value:"Undefined Configuration Keys",id:"undefined-configuration-keys",level:3},{value:"Invalid Validation Handlers",id:"invalid-validation-handlers",level:3},{value:"Invalid Definitions",id:"invalid-definitions",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Related Topics",id:"related-topics",level:2}];function d(n){const e={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"configuration-management",children:"Configuration Management"})}),"\n",(0,t.jsx)(e.p,{children:"Orkestra provides a robust configuration system that allows you to define, validate, and manage application settings. This guide covers all aspects of the configuration system."}),"\n",(0,t.jsx)(e.h2,{id:"configuration-basics",children:"Configuration Basics"}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"Configuration"})," class is the central component of Orkestra's configuration system:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",children:"use Orkestra\\Configuration;\n\n// Create a new configuration instance\n$config = new Configuration([\n    'key' => 'value',\n    'anotherKey' => 'anotherValue'\n]);\n"})}),"\n",(0,t.jsx)(e.h3,{id:"setting-and-getting-values",children:"Setting and Getting Values"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",children:"// Set a value\n$config->set('key', 'value');\n\n// Get a value\n$value = $config->get('key'); // Returns 'value'\n\n// Check if a key exists\nif ($config->has('key')) {\n    // Key exists\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"configuration-definitions",children:"Configuration Definitions"}),"\n",(0,t.jsx)(e.p,{children:"Definitions provide structure and documentation for your configuration values:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",children:"$config = new Configuration([\n    'definition' => [\n        'db_host' => ['Database hostname', 'localhost'],\n        'db_port' => ['Database port', 3306],\n        'api_key' => ['API key for external service', null], // Required value\n    ]\n]);\n"})}),"\n",(0,t.jsx)(e.p,{children:"Each definition consists of:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"A descriptive label explaining the purpose of the configuration"}),"\n",(0,t.jsxs)(e.li,{children:["A default value (or ",(0,t.jsx)(e.code,{children:"null"})," for required values)"]}),"\n"]}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Important"}),": Orkestra's current implementation only supports flat configuration definitions. Nested definitions (definitions for nested arrays or objects) are not directly supported."]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"accessing-default-values",children:"Accessing Default Values"}),"\n",(0,t.jsx)(e.p,{children:"When retrieving a value, if the key doesn't exist but has a definition with a default, the default is returned:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",children:"// Even if 'db_host' isn't explicitly set, it will return 'localhost'\n$dbHost = $config->get('db_host');\n"})}),"\n",(0,t.jsx)(e.h3,{id:"required-values",children:"Required Values"}),"\n",(0,t.jsxs)(e.p,{children:["If a configuration key is defined with a ",(0,t.jsx)(e.code,{children:"null"})," default, it's considered required. Attempting to retrieve a required value without setting it first will throw an exception:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",children:"// This will throw an InvalidArgumentException if 'api_key' isn't set\n$apiKey = $config->get('api_key');\n"})}),"\n",(0,t.jsx)(e.h2,{id:"working-with-complex-values",children:"Working with Complex Values"}),"\n",(0,t.jsx)(e.p,{children:"While definitions are flat, the configuration values themselves can be complex objects or arrays:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",children:"// Set a complex value\n$config->set('database', [\n    'host' => 'localhost',\n    'port' => 3306,\n    'credentials' => [\n        'username' => 'user',\n        'password' => 'password'\n    ]\n]);\n\n// Get the complex value\n$database = $config->get('database');\n$host = $database['host'];\n$username = $database['credentials']['username'];\n"})}),"\n",(0,t.jsx)(e.p,{children:"To define and validate complex values, use a flat definition with a validation function:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",children:"$config = new Configuration([\n    'definition' => [\n        'database' => ['Database configuration', []], // Default is empty array\n    ],\n    'validation' => [\n        'database' => function ($value) {\n            // Validate database configuration\n            if (!is_array($value)) return false;\n            \n            // Check required fields\n            if (!isset($value['host']) || !isset($value['credentials'])) {\n                return false;\n            }\n            \n            // Check credentials\n            if (!isset($value['credentials']['username']) || \n                !isset($value['credentials']['password'])) {\n                return false;\n            }\n            \n            return true;\n        }\n    ]\n]);\n"})}),"\n",(0,t.jsx)(e.h2,{id:"configuration-validation",children:"Configuration Validation"}),"\n",(0,t.jsx)(e.p,{children:"Orkestra's configuration system includes powerful validation capabilities:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",children:"$config = new Configuration([\n    'db_port' => 3306,\n    'definition' => [\n        'db_port' => ['Database port', 3306],\n    ],\n    'validation' => [\n        'db_port' => fn ($value) => is_int($value) && $value > 0,\n    ]\n]);\n\n// Validates all configuration values\n$config->validate(); // Returns true if all validations pass\n"})}),"\n",(0,t.jsx)(e.h3,{id:"custom-validators",children:"Custom Validators"}),"\n",(0,t.jsx)(e.p,{children:"You can define custom validation functions for your configuration values:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",children:"$config = new Configuration([]);\n\n$config->set('validation', [\n    'api_url' => function ($value) {\n        return filter_var($value, FILTER_VALIDATE_URL) !== false;\n    },\n    'email' => function ($value) {\n        return filter_var($value, FILTER_VALIDATE_EMAIL) !== false;\n    }\n]);\n\n$config->set('api_url', 'https://api.example.com');\n$config->set('email', 'user@example.com');\n$config->validate(); // Returns true\n"})}),"\n",(0,t.jsx)(e.h3,{id:"validation-on-boot",children:"Validation on Boot"}),"\n",(0,t.jsx)(e.p,{children:"Configuration validation typically happens during the application boot process:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",children:"// In a service provider\npublic function register(App $app): void\n{\n    $app->config()->set('api_key', '1234567890');\n}\n\n// In App::boot()\n$app->config()->validate(); // Will throw if any validations fail\n"})}),"\n",(0,t.jsx)(e.h2,{id:"advanced-configuration-patterns",children:"Advanced Configuration Patterns"}),"\n",(0,t.jsx)(e.h3,{id:"environment-specific-configuration",children:"Environment-Specific Configuration"}),"\n",(0,t.jsx)(e.p,{children:"You can load different configuration values based on the environment:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",children:"$env = $_ENV['APP_ENV'] ?? 'development';\n\n// Load base config\n$config = new Configuration([\n    // Common configuration\n]);\n\n// Load environment-specific config\n$envConfig = require \"config/{$env}.php\";\nforeach ($envConfig as $key => $value) {\n    $config->set($key, $value);\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"organization-of-complex-configuration",children:"Organization of Complex Configuration"}),"\n",(0,t.jsx)(e.p,{children:"Since nested definitions aren't supported, it's recommended to organize complex configurations using distinct top-level keys:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",children:"// Instead of nested definitions for database configuration\n// Use separate keys for different components\n\n// config/database.php\nreturn [\n    'db_driver' => $_ENV['DB_DRIVER'] ?? 'mysql',\n    'db_host' => $_ENV['DB_HOST'] ?? 'localhost',\n    'db_port' => (int)($_ENV['DB_PORT'] ?? 3306),\n    'db_name' => $_ENV['DB_NAME'],\n    'db_user' => $_ENV['DB_USER'],\n    'db_password' => $_ENV['DB_PASSWORD'],\n];\n\n// In bootstrap file\n$app->config()->set('database', require __DIR__ . '/config/database.php');\n\n// Define validation for the entire database config\n$app->config()->set('validation', [\n    'database' => function ($value) {\n        return isset($value['db_host']) && isset($value['db_name']);\n    }\n]);\n\n// Or use an array of values for more complex structures\n$app->config()->set('services', [\n    'email' => [\n        'driver' => 'smtp',\n        'host' => 'smtp.example.com'\n    ],\n    'payment' => [\n        'provider' => 'stripe',\n        'key' => 'sk_test_123'\n    ]\n]);\n"})}),"\n",(0,t.jsx)(e.h2,{id:"common-error-cases-and-troubleshooting",children:"Common Error Cases and Troubleshooting"}),"\n",(0,t.jsx)(e.h3,{id:"undefined-configuration-keys",children:"Undefined Configuration Keys"}),"\n",(0,t.jsx)(e.p,{children:"Attempting to get an undefined configuration key will throw an exception:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",children:"$config = new Configuration([]);\n$config->get('undefinedKey'); // Throws InvalidArgumentException\n"})}),"\n",(0,t.jsx)(e.p,{children:"Solution: Always check if a key exists before attempting to get its value:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",children:"if ($config->has('key')) {\n    $value = $config->get('key');\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"invalid-validation-handlers",children:"Invalid Validation Handlers"}),"\n",(0,t.jsx)(e.p,{children:"Setting invalid validation handlers will throw an exception:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",children:"$config = new Configuration([]);\n\n// These will all throw InvalidArgumentException\n$config->set('validation', 'invalidValidator');\n$config->set('validation', ['key' => 'invalidValidator']);\n$config->set('validation', [fn () => true]); // Missing key\n"})}),"\n",(0,t.jsx)(e.p,{children:"Solution: Ensure validation handlers are arrays of key-function pairs:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",children:"$config->set('validation', [\n    'key' => fn ($value) => true // Valid validator\n]);\n"})}),"\n",(0,t.jsx)(e.h3,{id:"invalid-definitions",children:"Invalid Definitions"}),"\n",(0,t.jsx)(e.p,{children:"Setting invalid definitions will throw an exception:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",children:"$config = new Configuration([]);\n\n// These will all throw InvalidArgumentException\n$config->set('definition', 'invalidDefinition');\n$config->set('definition', ['key' => []]); // Empty definition\n$config->set('definition', ['key' => ['description', 'default', 'extraValue']]); // Too many elements\n"})}),"\n",(0,t.jsx)(e.p,{children:"Solution: Ensure definitions follow the correct format:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",children:"$config->set('definition', [\n    'key' => ['Description', 'default'] // Valid definition\n]);\n"})}),"\n",(0,t.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Use Descriptive Keys"}),": Use descriptive keys that indicate both the category and the specific setting (e.g., ",(0,t.jsx)(e.code,{children:"db_host"})," instead of just ",(0,t.jsx)(e.code,{children:"host"}),")."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Validate Critical Values"}),": Use validation for all critical configuration values to catch issues early."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Group Related Settings"}),": Use arrays for complex values but keep the definitions at the top level."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Use Environment Variables"}),": Load sensitive values from environment variables or secrets managers rather than hardcoding them."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Document Validation Rules"}),": Include clear documentation about validation rules in your definitions."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"related-topics",children:"Related Topics"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"/docs/core-concepts/app-lifecycle",children:"Application Lifecycle"})," - How configuration integrates into the application lifecycle"]}),"\n"]})]})}function u(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>s,x:()=>r});var a=i(6540);const t={},o=a.createContext(t);function s(n){const e=a.useContext(o);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:s(n.components),a.createElement(o.Provider,{value:e},n.children)}}}]);