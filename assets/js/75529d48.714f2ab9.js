"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[65],{2105:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"guides/api","title":"API Development","description":"Orkestra follows PSR-15 for HTTP message handling and provides abstract controllers for building APIs.","source":"@site/docs/guides/api.md","sourceDirName":"guides","slug":"/guides/api","permalink":"/orkestra/docs/guides/api","draft":false,"unlisted":false,"editUrl":"https://github.com/Luc-cpl/orkestra/tree/main/docs/docs/guides/api.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Configuration Management","permalink":"/orkestra/docs/core-concepts/configuration-management"},"next":{"title":"Routing","permalink":"/orkestra/docs/guides/routing"}}');var t=s(4848),i=s(8453);const o={sidebar_position:1},a="API Development",l={},c=[{value:"Abstract Controllers",id:"abstract-controllers",level:2},{value:"Request Handling",id:"request-handling",level:2},{value:"Response Handling",id:"response-handling",level:2},{value:"Route Definitions",id:"route-definitions",level:2},{value:"Entity Parameters",id:"entity-parameters",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Related Topics",id:"related-topics",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"api-development",children:"API Development"})}),"\n",(0,t.jsx)(n.p,{children:"Orkestra follows PSR-15 for HTTP message handling and provides abstract controllers for building APIs."}),"\n",(0,t.jsx)(n.h2,{id:"abstract-controllers",children:"Abstract Controllers"}),"\n",(0,t.jsx)(n.p,{children:"Orkestra provides abstract controllers that extend PSR-15's request handler interface:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"use Orkestra\\Services\\Http\\Controllers\\AbstractController;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\nclass ApiController extends AbstractController\n{\n    public function handle(ServerRequestInterface $request): ResponseInterface\n    {\n        // Handle the request\n        return $this->response;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"request-handling",children:"Request Handling"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"class UserController extends AbstractController\n{\n    public function handle(ServerRequestInterface $request): ResponseInterface\n    {\n        // Get request data\n        $data = $request->getParsedBody();\n        \n        // Get query parameters\n        $query = $request->getQueryParams();\n        \n        // Get headers\n        $headers = $request->getHeaders();\n        \n        // Get request method\n        $method = $request->getMethod();\n        \n        return $this->response;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"response-handling",children:"Response Handling"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"class UserController extends AbstractController\n{\n    public function handle(ServerRequestInterface $request): ResponseInterface\n    {\n        $data = [\n            'users' => [\n                ['id' => 1, 'name' => 'John'],\n                ['id' => 2, 'name' => 'Jane']\n            ]\n        ];\n        \n        // Set response body\n        $this->response->getBody()->write(json_encode($data));\n        \n        // Set response headers\n        $this->response = $this->response\n            ->withHeader('Content-Type', 'application/json')\n            ->withStatus(200);\n            \n        return $this->response;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"route-definitions",children:"Route Definitions"}),"\n",(0,t.jsx)(n.p,{children:"Routes are defined in your configuration files:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"// config/routes.php\nreturn [\n    'GET /api/users' => [UserController::class, 'handle'],\n    'POST /api/users' => [UserController::class, 'handle'],\n];\n"})}),"\n",(0,t.jsx)(n.h2,{id:"entity-parameters",children:"Entity Parameters"}),"\n",(0,t.jsx)(n.p,{children:"You can use entities as route parameters:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"use Orkestra\\Services\\Http\\Attributes\\Entity;\n\nclass UserController extends AbstractController\n{\n    #[Entity(User::class)]\n    public function handle(ServerRequestInterface $request): ResponseInterface\n    {\n        $user = $request->getAttribute('user');\n        \n        return $this->response;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Follow PSR-15 standards"}),"\n",(0,t.jsx)(n.li,{children:"Use dependency injection"}),"\n",(0,t.jsx)(n.li,{children:"Keep controllers focused"}),"\n",(0,t.jsx)(n.li,{children:"Validate input data"}),"\n",(0,t.jsx)(n.li,{children:"Use proper HTTP status codes"}),"\n",(0,t.jsx)(n.li,{children:"Handle errors gracefully"}),"\n",(0,t.jsx)(n.li,{children:"Document your API endpoints"}),"\n",(0,t.jsx)(n.li,{children:"Use consistent response formats"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"related-topics",children:"Related Topics"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/guides/controllers",children:"Controllers"})," - Learn about controllers"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/guides/routing",children:"Routing"})," - Define API routes"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var r=s(6540);const t={},i=r.createContext(t);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);