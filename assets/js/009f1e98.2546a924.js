"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[715],{8370:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"getting-started/configuration","title":"Configuration","description":"Configuration in Orkestra is handled through the ConfigurationInterface and can be accessed through the App instance or directly via the interface.","source":"@site/docs/getting-started/configuration.md","sourceDirName":"getting-started","slug":"/getting-started/configuration","permalink":"/orkestra/docs/getting-started/configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/Luc-cpl/orkestra/tree/main/docs/docs/getting-started/configuration.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Installation","permalink":"/orkestra/docs/getting-started/installation"},"next":{"title":"Application Lifecycle","permalink":"/orkestra/docs/core-concepts/app-lifecycle"}}');var r=i(4848),t=i(8453);const o={sidebar_position:2},s="Configuration",l={},c=[{value:"Configuration Interface",id:"configuration-interface",level:2},{value:"Using Configuration",id:"using-configuration",level:2},{value:"Through App Instance",id:"through-app-instance",level:3},{value:"Through Configuration Interface",id:"through-configuration-interface",level:3},{value:"Configuration Files",id:"configuration-files",level:2},{value:"Setting Configuration Values",id:"setting-configuration-values",level:2},{value:"Using Service Providers",id:"using-service-providers",level:3},{value:"Validation Rules",id:"validation-rules",level:3},{value:"Configuration Definitions",id:"configuration-definitions",level:3},{value:"<strong>All configuration values must be defined in some provider in order to load the application</strong>",id:"all-configuration-values-must-be-defined-in-some-provider-in-order-to-load-the-application",level:4},{value:"Validating Configuration",id:"validating-configuration",level:2},{value:"Validation Best Practices",id:"validation-best-practices",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Related Topics",id:"related-topics",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"configuration",children:"Configuration"})}),"\n",(0,r.jsxs)(e.p,{children:["Configuration in Orkestra is handled through the ",(0,r.jsx)(e.code,{children:"ConfigurationInterface"})," and can be accessed through the ",(0,r.jsx)(e.code,{children:"App"})," instance or directly via the interface."]}),"\n",(0,r.jsx)(e.h2,{id:"configuration-interface",children:"Configuration Interface"}),"\n",(0,r.jsxs)(e.p,{children:["The ",(0,r.jsx)(e.code,{children:"ConfigurationInterface"})," provides methods to manage configuration values:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-php",children:"interface ConfigurationInterface\n{\n    public function validate(): bool;\n    public function set(string $key, mixed $value): self;\n    public function get(string $key): mixed;\n    public function has(string $key): bool;\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"using-configuration",children:"Using Configuration"}),"\n",(0,r.jsx)(e.h3,{id:"through-app-instance",children:"Through App Instance"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-php",children:"use Orkestra\\App;\n\nclass MyService\n{\n    public function __construct(\n        protected App $app\n    ) {}\n\n    public function someMethod()\n    {\n        $value = $this->app->config()->get('my.config.key');\n    }\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"through-configuration-interface",children:"Through Configuration Interface"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-php",children:"use Orkestra\\Interfaces\\ConfigurationInterface;\n\nclass MyService\n{\n    public function __construct(\n        protected ConfigurationInterface $config\n    ) {}\n\n    public function someMethod()\n    {\n        $value = $this->config->get('my.config.key');\n    }\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"configuration-files",children:"Configuration Files"}),"\n",(0,r.jsxs)(e.p,{children:["Configuration file are stored in the ",(0,r.jsx)(e.code,{children:"config/app.php"})," by default. This file should return an array of configuration values, including the providers:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-php",children:"// config/app.php\nreturn [\n    'name' => 'Orkestra',\n    'debug' => false,\n    'providers' => [\n        // Service providers\n    ],\n];\n"})}),"\n",(0,r.jsx)(e.p,{children:"For larger applications we recommend that you split your configuration in multiple files:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-php",children:"// config/app.php\nreturn [\n    'name' => 'Orkestra',\n    'debug' => false,\n    'providers' => [\n        // Service providers\n    ],\n    ...require __DIR__ . '/database.php',\n    ...require __DIR__ . '/cache.php',\n    ...require __DIR__ . '/mail.php',\n];\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-php",children:"// config/database.php\nreturn [\n    'default' => 'mysql',\n    'connections' => [\n        'mysql' => [\n            'host' => 'localhost',\n            'database' => 'orkestra',\n            'username' => 'root',\n            'password' => '',\n        ],\n    ],\n];\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-php",children:"// config/cache.php\nreturn [\n    'default' => 'file',\n    'stores' => [\n        'file' => [\n            'driver' => 'file',\n            'path' => storage_path('framework/cache'),\n        ],\n        'redis' => [\n            'driver' => 'redis',\n            'connection' => 'cache',\n        ],\n    ],\n];\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-php",children:"// config/mail.php\nreturn [\n    'default' => 'smtp',\n    'mailers' => [\n        'smtp' => [\n            'transport' => 'smtp',\n            'host' => 'smtp.mailtrap.io',\n            'port' => 2525,\n            'username' => null,\n            'password' => null,\n        ],\n    ],\n];\n"})}),"\n",(0,r.jsx)(e.h2,{id:"setting-configuration-values",children:"Setting Configuration Values"}),"\n",(0,r.jsxs)(e.p,{children:["Configuration values can be set in two ways: through configuration files or programmatically using the ",(0,r.jsx)(e.code,{children:"set"})," method."]}),"\n",(0,r.jsx)(e.h3,{id:"using-service-providers",children:"Using Service Providers"}),"\n",(0,r.jsx)(e.p,{children:"Service providers should only define validation rules and definitions for their own service-specific configurations. This keeps the configuration modular and maintainable:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-php",children:"use Orkestra\\App;\nuse Orkestra\\Interfaces\\ProviderInterface;\n\nclass DatabaseServiceProvider implements ProviderInterface\n{\n    public function register(App $app): void\n    {\n        // Define validation rules for database-specific configuration\n        $app->config()->set('validation', [\n            'database.host' => fn ($value) => filter_var($value, FILTER_VALIDATE_IP) ? true : 'Invalid database host',\n            'database.port' => fn ($value) => is_numeric($value) && $value > 0 && $value <= 65535 \n                ? true \n                : 'Port must be a number between 1 and 65535',\n        ]);\n\n        // Define configuration with descriptions and defaults for database\n        $app->config()->set('definition', [\n            'database.host' => ['Database server hostname', 'localhost'],\n            'database.port' => ['Database server port', 3306],\n            'database.name' => ['Database name', 'orkestra'],\n        ]);\n    }\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"This approach has several benefits:"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"Each provider is responsible for its own configuration definition"}),"\n",(0,r.jsx)(e.li,{children:"Configuration is modular and easier to maintain"}),"\n",(0,r.jsx)(e.li,{children:"Providers can be added or removed without affecting other configurations"}),"\n",(0,r.jsx)(e.li,{children:"Clear separation of concerns"}),"\n",(0,r.jsx)(e.li,{children:"Easier to test and debug configuration issues"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"validation-rules",children:"Validation Rules"}),"\n",(0,r.jsx)(e.p,{children:"Validation rules are callables that return either:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"true"})," if the value is valid"]}),"\n",(0,r.jsx)(e.li,{children:"A string message explaining why the value is invalid"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-php",children:"$config->set('validation', [\n    // Simple type validation\n    'app_name' => fn ($value) => is_string($value) ? true : 'App name must be a string',\n    \n    // Complex validation with multiple conditions\n    'email' => function ($value) {\n        if (!is_string($value)) {\n            return 'Email must be a string';\n        }\n        if (!filter_var($value, FILTER_VALIDATE_EMAIL)) {\n            return 'Invalid email format';\n        }\n        return true;\n    },\n    \n    // Validation with custom logic\n    'port' => fn ($value) => is_numeric($value) && $value > 0 && $value <= 65535 \n        ? true \n        : 'Port must be a number between 1 and 65535',\n]);\n"})}),"\n",(0,r.jsx)(e.h3,{id:"configuration-definitions",children:"Configuration Definitions"}),"\n",(0,r.jsx)(e.h4,{id:"all-configuration-values-must-be-defined-in-some-provider-in-order-to-load-the-application",children:(0,r.jsx)(e.strong,{children:"All configuration values must be defined in some provider in order to load the application"})}),"\n",(0,r.jsx)(e.p,{children:"Configuration definitions provide metadata about each configuration value:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"First element: Description of the configuration"}),"\n",(0,r.jsx)(e.li,{children:"Second element: Default value (optional)"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-php",children:"$config->set('definition', [\n    // Simple configuration with description and default\n    'app_name' => ['The name of your application', 'Orkestra'],\n    \n    // Configuration without default value (required)\n    'api_key' => ['Your API key for external service'],\n]);\n"})}),"\n",(0,r.jsx)(e.p,{children:"You can get all defined configurations in your app by running:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"maestro app:config:list\n"})}),"\n",(0,r.jsx)(e.h2,{id:"validating-configuration",children:"Validating Configuration"}),"\n",(0,r.jsxs)(e.p,{children:["The ",(0,r.jsx)(e.code,{children:"validate"})," method ensures all required configuration values are present and valid. This method runs automatically before providers boot process"]}),"\n",(0,r.jsx)(e.h3,{id:"validation-best-practices",children:"Validation Best Practices"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"Always define validation rules for critical configuration"}),"\n",(0,r.jsx)(e.li,{children:"Provide meaningful error messages"}),"\n",(0,r.jsx)(e.li,{children:"Use type hints in validation callables"}),"\n",(0,r.jsx)(e.li,{children:"Handle edge cases in validation rules"}),"\n",(0,r.jsx)(e.li,{children:"Document validation requirements"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"Keep configuration organized in separate files"}),"\n",(0,r.jsx)(e.li,{children:"Use descriptive keys for configuration values"}),"\n",(0,r.jsx)(e.li,{children:"Provide default values when possible"}),"\n",(0,r.jsx)(e.li,{children:"Document configuration options"}),"\n",(0,r.jsx)(e.li,{children:"Use type hints for configuration values"}),"\n",(0,r.jsx)(e.li,{children:"Follow naming conventions"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"related-topics",children:"Related Topics"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"/docs/guides/providers",children:"Service Providers"})," - Learn how to register configuration in providers"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"/docs/getting-started/installation",children:"Application Structure"})," - Understand the application structure"]}),"\n"]})]})}function u(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>o,x:()=>s});var a=i(6540);const r={},t=a.createContext(r);function o(n){const e=a.useContext(t);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),a.createElement(t.Provider,{value:e},n.children)}}}]);