"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[123],{3852:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"guides/controllers","title":"Controllers","description":"Orkestra controllers follow PSR-15 standards and support dependency injection for better testability and maintainability.","source":"@site/docs/guides/controllers.md","sourceDirName":"guides","slug":"/guides/controllers","permalink":"/docs/guides/controllers","draft":false,"unlisted":false,"editUrl":"https://github.com/Luc-cpl/orkestra/tree/main/docs/docs/guides/controllers.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Routing","permalink":"/docs/guides/routing"},"next":{"title":"Service Providers","permalink":"/docs/guides/providers"}}');var s=r(4848),i=r(8453);const l={sidebar_position:2},a="Controllers",o={},c=[{value:"Abstract Controller",id:"abstract-controller",level:2},{value:"Dependency Injection",id:"dependency-injection",level:2},{value:"Request Handling",id:"request-handling",level:2},{value:"Response Handling",id:"response-handling",level:2},{value:"Attribute Parameters",id:"attribute-parameters",level:2},{value:"Entity Parameters",id:"entity-parameters",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Related Topics",id:"related-topics",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"controllers",children:"Controllers"})}),"\n",(0,s.jsx)(n.p,{children:"Orkestra controllers follow PSR-15 standards and support dependency injection for better testability and maintainability."}),"\n",(0,s.jsx)(n.h2,{id:"abstract-controller",children:"Abstract Controller"}),"\n",(0,s.jsxs)(n.p,{children:["All controllers extend the ",(0,s.jsx)(n.code,{children:"AbstractController"})," class which implements PSR-15's ",(0,s.jsx)(n.code,{children:"RequestHandlerInterface"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"use Orkestra\\Services\\Http\\Controllers\\AbstractController;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\n\nclass UserController extends AbstractController\n{\n    public function handle(ServerRequestInterface $request): ResponseInterface\n    {\n        // Handle the request\n        return $this->response;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"dependency-injection",children:"Dependency Injection"}),"\n",(0,s.jsx)(n.p,{children:"Controllers support dependency injection through the constructor:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"class UserController extends AbstractController\n{\n    private UserService $userService;\n    private LoggerInterface $logger;\n\n    public function __construct(\n        UserService $userService,\n        LoggerInterface $logger\n    ) {\n        $this->userService = $userService;\n        $this->logger = $logger;\n    }\n\n    public function handle(ServerRequestInterface $request): ResponseInterface\n    {\n        $users = $this->userService->getAllUsers();\n        \n        $this->logger->info('Retrieved users', ['count' => count($users)]);\n        \n        return $this->response;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"request-handling",children:"Request Handling"}),"\n",(0,s.jsx)(n.p,{children:"Controllers receive PSR-7 request objects:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"class UserController extends AbstractController\n{\n    public function handle(ServerRequestInterface $request, array $params): ResponseInterface\n    {\n        // Get request data\n        $data = $request->getParsedBody();\n        \n        // Get query parameters\n        $query = $request->getQueryParams();\n        \n        // Get headers\n        $headers = $request->getHeaders();\n        \n        // Get request method\n        $method = $request->getMethod();\n        \n        // Get request attributes (route parameters)\n        $id = $params['id'];\n        \n        return $this->response;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"response-handling",children:"Response Handling"}),"\n",(0,s.jsx)(n.p,{children:"Controllers return PSR-7 response objects, strings or json serializable objects/arrays:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"class UserController extends AbstractController\n{\n    public function __invoke(ServerRequestInterface $request): ResponseInterface\n    {\n        $data = [\n            'users' => [\n                ['id' => 1, 'name' => 'John'],\n                ['id' => 2, 'name' => 'Jane']\n            ]\n        ];\n        \n        // Set response body\n        $this->response->getBody()->write(json_encode($data));\n        \n        // Set response headers\n        $this->response = $this->response\n            ->withHeader('Content-Type', 'application/json')\n            ->withStatus(200);\n            \n        return $this->response;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"class UserController extends AbstractController\n{\n    public function __invoke(ServerRequestInterface $request): array\n    {\n        return [\n            'users' => [\n                ['id' => 1, 'name' => 'John'],\n                ['id' => 2, 'name' => 'Jane']\n            ]\n        ];\n    }\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"class HelloController extends AbstractController\n{\n    public function __invoke(ServerRequestInterface $request): string\n    {\n        return 'Hello Word';\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"attribute-parameters",children:"Attribute Parameters"}),"\n",(0,s.jsx)(n.p,{children:"Controllers can add defined parameters with validation to be used in Route Definition and validation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"use Orkestra\\Services\\Http\\Attributes\\Param;\n\nclass UserController extends AbstractController\n{\n    #[Param('my_value_1', type: 'string', validation: 'required|min:3|max:255')]\n    #[Param('my_value_2', validation: 'required', enum: ParamType::class)]\n    public function handle(ServerRequestInterface $request): ResponseInterface\n    {\n        /** Your code */\n\n        return $this->response;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"entity-parameters",children:"Entity Parameters"}),"\n",(0,s.jsx)(n.p,{children:"You can even define entire entities as route parameters, this will autommatically add the User entity params in Route Definition and validation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"use Orkestra\\Services\\Http\\Attributes\\Entity;\n\nclass UserController extends AbstractController\n{\n    #[Entity(User::class)]\n    public function handle(ServerRequestInterface $request): ResponseInterface\n    {\n        /** Your code */\n\n        return $this->response;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"use Orkestra\\Services\\Http\\Attributes\\Param;\n\n#[Param('entity_value_1', type: 'string', validation: 'required|min:3|max:255')]\nclass User\n{\n    #[Param]\n    public int $entity_value_2;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Follow PSR-15 standards"}),"\n",(0,s.jsx)(n.li,{children:"Use dependency inversion"}),"\n",(0,s.jsx)(n.li,{children:"Keep controllers focused"}),"\n",(0,s.jsx)(n.li,{children:"Validate input data"}),"\n",(0,s.jsx)(n.li,{children:"Use proper HTTP status codes"}),"\n",(0,s.jsx)(n.li,{children:"Handle errors gracefully"}),"\n",(0,s.jsx)(n.li,{children:"Document your endpoints"}),"\n",(0,s.jsx)(n.li,{children:"Use consistent response formats"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"related-topics",children:"Related Topics"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/guides/routing",children:"Routing"})," - Define routes for controllers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/guides/api",children:"API Development"})," - Build APIs with controllers"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>a});var t=r(6540);const s={},i=t.createContext(s);function l(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);