"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[71],{7719:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"advanced-topics/testing","title":"Testing Orkestra Applications","description":"This guide shows how to effectively test Orkestra applications using PHPUnit and Pest, with examples drawn from the framework\'s own test suite.","source":"@site/docs/advanced-topics/testing.md","sourceDirName":"advanced-topics","slug":"/advanced-topics/testing","permalink":"/docs/advanced-topics/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/Luc-cpl/orkestra/tree/main/docs/docs/advanced-topics/testing.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Service Decoration","permalink":"/docs/guides/service-decoration"},"next":{"title":"Troubleshooting Orkestra Applications","permalink":"/docs/advanced-topics/troubleshooting"}}');var i=t(4848),o=t(8453);const a={sidebar_position:1},r="Testing Orkestra Applications",c={},l=[{value:"Testing Philosophy",id:"testing-philosophy",level:2},{value:"Testing Setup",id:"testing-setup",level:2},{value:"Basic Test Structure",id:"basic-test-structure",level:3},{value:"The app() Function in Tests",id:"the-app-function-in-tests",level:3},{value:"Testing Application Components",id:"testing-application-components",level:2},{value:"Testing the Container",id:"testing-the-container",level:3},{value:"Testing Service Providers",id:"testing-service-providers",level:3},{value:"Testing Configuration",id:"testing-configuration",level:3},{value:"Testing Controllers",id:"testing-controllers",level:3},{value:"Mocking Dependencies",id:"mocking-dependencies",level:2},{value:"PHPUnit&#39;s createMock",id:"phpunits-createmock",level:3},{value:"Testing Error Cases",id:"testing-error-cases",level:2},{value:"Data Providers",id:"data-providers",level:2},{value:"Testing Binding Decorations",id:"testing-binding-decorations",level:2},{value:"Testing Best Practices",id:"testing-best-practices",level:2},{value:"1. Reset Application State Between Tests",id:"1-reset-application-state-between-tests",level:3},{value:"2. Isolate Tests",id:"2-isolate-tests",level:3},{value:"3. Test Error States",id:"3-test-error-states",level:3},{value:"4. Mock External Dependencies",id:"4-mock-external-dependencies",level:3},{value:"5. Test Provider Integration",id:"5-test-provider-integration",level:3},{value:"Writing Testable Code",id:"writing-testable-code",level:2},{value:"Dependency Injection",id:"dependency-injection",level:3},{value:"Interface-Based Design",id:"interface-based-design",level:3},{value:"Avoid Global State",id:"avoid-global-state",level:3},{value:"Continuous Integration",id:"continuous-integration",level:2},{value:"Related Topics",id:"related-topics",level:2}];function p(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"testing-orkestra-applications",children:"Testing Orkestra Applications"})}),"\n",(0,i.jsx)(n.p,{children:"This guide shows how to effectively test Orkestra applications using PHPUnit and Pest, with examples drawn from the framework's own test suite."}),"\n",(0,i.jsx)(n.h2,{id:"testing-philosophy",children:"Testing Philosophy"}),"\n",(0,i.jsx)(n.p,{children:"Orkestra's testing approach emphasizes:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Unit Testing"}),": Testing individual components in isolation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Integration Testing"}),": Testing how components work together"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Feature Testing"}),": Testing full application features"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mocking Dependencies"}),": Isolating components for testing"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"testing-setup",children:"Testing Setup"}),"\n",(0,i.jsxs)(n.p,{children:["Orkestra uses ",(0,i.jsx)(n.a,{href:"https://pestphp.com/",children:"Pest PHP"}),", a testing framework built on top of PHPUnit that provides a more fluent syntax for writing tests."]}),"\n",(0,i.jsx)(n.h3,{id:"basic-test-structure",children:"Basic Test Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"<?php\n\n// Basic test with Pest\ntest('can do something', function () {\n    // Arrange - Set up test prerequisites\n    $service = new MyService();\n    \n    // Act - Perform the action being tested\n    $result = $service->doSomething();\n    \n    // Assert - Verify the results\n    expect($result)->toEqual('expected value');\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"the-app-function-in-tests",children:"The app() Function in Tests"}),"\n",(0,i.jsxs)(n.p,{children:["In Orkestra's test suite, a global ",(0,i.jsx)(n.code,{children:"app()"})," function is used for convenience to access the application instance:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"// This app() function is ONLY available in the test environment\n// Do not rely on this in your actual application code\nfunction app() {\n    global $app;\n    if (!isset($app)) {\n        $app = new \\Orkestra\\App(new \\Orkestra\\Configuration());\n    }\n    return $app;\n}\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Important"}),": The ",(0,i.jsx)(n.code,{children:"app()"})," function is only intended for testing purposes. In your actual application code, you should always use the ",(0,i.jsx)(n.code,{children:"Orkestra\\App"})," instance directly or the helper provided by the skeleton repository."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"testing-application-components",children:"Testing Application Components"}),"\n",(0,i.jsx)(n.h3,{id:"testing-the-container",children:"Testing the Container"}),"\n",(0,i.jsx)(n.p,{children:"The container is a central part of Orkestra. Here's how to test container bindings:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"test('can get from container', function () {\n    // In tests, we use app() helper for convenience\n    $app = app();\n    $app->bind('test', fn () => 'testValue');\n    expect($app->get('test'))->toEqual('testValue');\n});\n\ntest('can make from container with constructor parameters', function () {\n    $app = app();\n    $app->bind('test', fn ($param) => $param);\n    expect($app->make('test', ['param' => 'testValue']))->toEqual('testValue');\n});\n\ntest('can check if container has service', function () {\n    $app = app();\n    expect($app->has('test'))->toBeFalse();\n    $app->bind('test', fn () => 'testValue');\n    expect($app->has('test'))->toBeTrue();\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"testing-service-providers",children:"Testing Service Providers"}),"\n",(0,i.jsx)(n.p,{children:"Service providers can be tested by verifying their registration and boot behavior:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"test('can register a provider', function () {\n    $app = app();\n    $providerClass = new class () implements ProviderInterface {\n        public string $test;\n        public function register(App $app): void\n        {\n            // Registration logic\n        }\n        public function boot(App $app): void\n        {\n            // Boot logic\n        }\n    };\n    \n    $app->provider($providerClass::class);\n    $provider = $app->get($providerClass::class);\n    $provider->test = 'testValue';\n    expect($app->get($providerClass::class))->toEqual($provider);\n});\n\ntest('can boot', function () {\n    $app = app();\n    $providerClass = new class () implements ProviderInterface {\n        public $test = null;\n        public function register(App $app): void\n        {\n            // Registration logic\n        }\n        public function boot(App $app): void\n        {\n            $this->test = 'testValue';\n        }\n    };\n\n    $app->provider($providerClass::class);\n    $app->config()->set('env', 'development');\n    $app->config()->set('root', './');\n    $app->boot();\n\n    $provider = $app->get($providerClass::class);\n    expect($provider->test)->toEqual('testValue');\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"testing-configuration",children:"Testing Configuration"}),"\n",(0,i.jsx)(n.p,{children:"Test configuration setting, validation, and retrieval:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"test('can validate configuration', function () {\n    $config = new Configuration([\n        'definition' => [\n            'key1' => ['description1', 'default1'],\n            'key2' => ['description2', 'default2'],\n        ],\n        'validation' => [\n            'key1' => fn ($value) => $value === 'default1',\n            'key2' => fn ($value) => $value === 'default2',\n        ],\n    ]);\n\n    expect($config->validate())->toBeTrue();\n});\n\ntest('can set and get configuration', function () {\n    $config = new Configuration([]);\n    $config->set('key', 'value');\n\n    expect($config->get('key'))->toBe('value');\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"testing-controllers",children:"Testing Controllers"}),"\n",(0,i.jsx)(n.p,{children:"Test controller behavior, including route handling:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"test('can set a route in api controller', function () {\n    $app = app();\n    $route = Mockery::mock(RouteInterface::class);\n\n    $class = new class () extends AbstractApiController {\n        public function getRoute(): RouteInterface\n        {\n            return $this->route;\n        }\n    };\n\n    $app->provider(HttpProvider::class);\n    $app->bind(AbstractApiController::class, $class::class);\n    $controller = $app->get(AbstractApiController::class);\n    $controller->setRoute($route);\n    expect($controller->getRoute())->toBe($route);\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"mocking-dependencies",children:"Mocking Dependencies"}),"\n",(0,i.jsxs)(n.p,{children:["Orkestra tests heavily use ",(0,i.jsx)(n.a,{href:"https://github.com/mockery/mockery",children:"Mockery"})," for mocking dependencies:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"test('can decorate a service', function () {\n    $app = app();\n    $mock = Mockery::mock();\n    $mock->shouldReceive('test')->andReturn('testValue');\n\n    $mock2 = Mockery::mock();\n    $mock2->shouldReceive('test')->andReturn('testValueDecorated');\n\n    $callbackMock = Mockery::mock();\n    $callbackMock->shouldReceive('run')->once()->andReturn($mock2);\n\n    $app->bind($mock::class, fn () => $mock);\n    $app->decorate($mock::class, fn ($service) => $callbackMock->run());\n    expect($app->get($mock::class)->test())->toEqual('testValueDecorated');\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"phpunits-createmock",children:"PHPUnit's createMock"}),"\n",(0,i.jsxs)(n.p,{children:["For simpler mocking needs, PHPUnit's ",(0,i.jsx)(n.code,{children:"createMock"})," can also be used:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"test('can set constructor params', function () {\n    $mockedService = $this->createMock(CreateDefinitionHelper::class);\n    $mockedService->expects($this->once())\n        ->method('constructor')\n        ->with(\n            $this->equalTo('testValue1'),\n            $this->equalTo('testValue2')\n        );\n\n    $bind = new AppBind('test', $mockedService);\n    $bind->constructor('testValue1', 'testValue2');\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"testing-error-cases",children:"Testing Error Cases"}),"\n",(0,i.jsx)(n.p,{children:"Testing error cases and exceptions is an important part of a comprehensive test suite:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"test('can not get from container with non existent key', function () {\n    $app = app();\n    $app->get('nonExistentKey');\n})->expectException(NotFoundExceptionInterface::class);\n\ntest('can not use a invalid env config', function () {\n    $app = app();\n    $app->config()->set('env', 'invalidEnv');\n    $app->boot();\n})->expectException(InvalidArgumentException::class);\n\ntest('can not use a invalid slug config', function (string $slug) {\n    $app = app();\n    $app->config()->set('slug', $slug);\n    $app->boot();\n})->with([\n    'invalid slug',\n    'invalidSlug',\n    'invalid slug!',\n    'invalidSlug!',\n    'invalid-slug!',\n    'invalid_slug!',\n])->expectException(InvalidArgumentException::class);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"data-providers",children:"Data Providers"}),"\n",(0,i.jsx)(n.p,{children:"Pest supports data providers for parameterized tests:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"test('can not use a invalid slug config', function (string $slug) {\n    $app = app();\n    $app->config()->set('slug', $slug);\n    $app->boot();\n})->with([\n    'invalid slug',\n    'invalidSlug',\n    'invalid slug!',\n    'invalidSlug!',\n    'invalid-slug!',\n    'invalid_slug!',\n])->expectException(InvalidArgumentException::class);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"testing-binding-decorations",children:"Testing Binding Decorations"}),"\n",(0,i.jsx)(n.p,{children:"Test service decoration patterns:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"test('can decorate a bind interface', function () {\n    $app = app();\n    interface TestInterface\n    {\n        public function test();\n    }\n\n    $class = new class () implements TestInterface {\n        public function test()\n        {\n            return 'testValue';\n        }\n    };\n\n    $class2 = new class () implements TestInterface {\n        public function test()\n        {\n            return 'testValueDecorated';\n        }\n    };\n\n    $app->bind(TestInterface::class, $class::class);\n    $app->decorate(TestInterface::class, fn ($service) => $class2);\n    expect($app->get(TestInterface::class)->test())->toEqual('testValueDecorated');\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"testing-best-practices",children:"Testing Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"1-reset-application-state-between-tests",children:"1. Reset Application State Between Tests"}),"\n",(0,i.jsxs)(n.p,{children:["In Pest, you can use the ",(0,i.jsx)(n.code,{children:"beforeEach"})," hook to reset the application state:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"beforeEach(function () {\n    // Create a fresh application instance for each test\n    $app = new App(new Configuration());\n    $app->config()->set('env', 'testing');\n    $app->config()->set('root', './');\n    \n    // Make the app instance available to tests\n    $GLOBALS['app'] = $app;\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-isolate-tests",children:"2. Isolate Tests"}),"\n",(0,i.jsx)(n.p,{children:"Ensure each test is isolated and doesn't depend on the state of other tests:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"test('can get configuration independently', function () {\n    // This test doesn't rely on state from other tests\n    $config = new Configuration(['key' => 'value']);\n    expect($config->get('key'))->toBe('value');\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-test-error-states",children:"3. Test Error States"}),"\n",(0,i.jsx)(n.p,{children:"Always test both success and error cases:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"// Success case\ntest('can validate valid configuration', function () {\n    $config = new Configuration([\n        'key' => 'validValue',\n        'validation' => [\n            'key' => fn ($value) => $value === 'validValue',\n        ],\n    ]);\n    expect($config->validate())->toBeTrue();\n});\n\n// Error case\ntest('throws exception for invalid configuration', function () {\n    $config = new Configuration([\n        'key' => 'invalidValue',\n        'validation' => [\n            'key' => fn ($value) => $value === 'validValue',\n        ],\n    ]);\n    $config->validate();\n})->throws(InvalidArgumentException::class);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"4-mock-external-dependencies",children:"4. Mock External Dependencies"}),"\n",(0,i.jsx)(n.p,{children:"Use mocks for external services to ensure test isolation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"test('service uses repository correctly', function () {\n    // Create a mock repository\n    $repository = Mockery::mock(UserRepositoryInterface::class);\n    $repository->shouldReceive('findById')\n        ->with(1)\n        ->once()\n        ->andReturn(new User(['id' => 1, 'name' => 'Test User']));\n    \n    // Inject the mock into the service\n    $service = new UserService($repository);\n    \n    // Test the service with the mock\n    $user = $service->getUser(1);\n    expect($user->name)->toBe('Test User');\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"5-test-provider-integration",children:"5. Test Provider Integration"}),"\n",(0,i.jsx)(n.p,{children:"Test how multiple providers work together:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"test('can boot all existing providers', function () {\n    $app = app();\n    $app->provider(CommandsProvider::class);\n    $app->provider(HooksProvider::class);\n    $app->provider(HttpProvider::class);\n    $app->provider(ViewProvider::class);\n\n    $app->boot();\n\n    // Verify that all providers were booted correctly\n    expect($app->get(HooksInterface::class))->toBeInstanceOf(HooksInterface::class);\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"writing-testable-code",children:"Writing Testable Code"}),"\n",(0,i.jsx)(n.h3,{id:"dependency-injection",children:"Dependency Injection"}),"\n",(0,i.jsx)(n.p,{children:"Use dependency injection to make your code testable:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"// Hard to test\nclass UserService {\n    public function getUser(int $id) {\n        // Don't do this - direct instantiation makes testing hard\n        $repository = new UserRepository();\n        return $repository->findById($id);\n    }\n}\n\n// Testable with dependency injection\nclass UserService {\n    private UserRepositoryInterface $repository;\n    \n    public function __construct(UserRepositoryInterface $repository) {\n        $this->repository = $repository;\n    }\n    \n    public function getUser(int $id) {\n        return $this->repository->findById($id);\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"interface-based-design",children:"Interface-Based Design"}),"\n",(0,i.jsx)(n.p,{children:"Use interfaces to define contracts between components:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"interface UserRepositoryInterface {\n    public function findById(int $id): ?User;\n}\n\nclass UserRepository implements UserRepositoryInterface {\n    public function findById(int $id): ?User {\n        // Implementation\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"avoid-global-state",children:"Avoid Global State"}),"\n",(0,i.jsx)(n.p,{children:"In your application code, avoid relying on global functions or static state:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"// DON'T do this in your application code\nclass BadService {\n    public function doSomething() {\n        // Don't use global app() function in your actual code\n        $config = app()->config()->get('some_setting');\n        // ...\n    }\n}\n\n// DO this instead\nclass GoodService {\n    private $config;\n    \n    public function __construct(Configuration $config) {\n        $this->config = $config;\n    }\n    \n    public function doSomething() {\n        $setting = $this->config->get('some_setting');\n        // ...\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"continuous-integration",children:"Continuous Integration"}),"\n",(0,i.jsx)(n.p,{children:"Add tests to your CI pipeline to ensure code quality:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# Example GitHub Actions workflow\nname: Tests\n\non: [push, pull_request]\n\njobs:\n  tests:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - uses: actions/checkout@v2\n    \n    - name: Setup PHP\n      uses: shivammathur/setup-php@v2\n      with:\n        php-version: '8.2'\n        \n    - name: Install Dependencies\n      run: composer install --no-interaction --prefer-dist\n        \n    - name: Execute Tests\n      run: vendor/bin/pest\n"})}),"\n",(0,i.jsx)(n.h2,{id:"related-topics",children:"Related Topics"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/advanced-topics/troubleshooting",children:"Troubleshooting"})," - Debugging common issues"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/core-concepts/dependency-injection",children:"Dependency Injection"})," - Understanding the service container"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var s=t(6540);const i={},o=s.createContext(i);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);