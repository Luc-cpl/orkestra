"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[832],{111:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"guides/providers","title":"Service Providers","description":"Service providers are the central place for all application bootstrapping. They are responsible for binding things into the service container, registering services, and booting various components.","source":"@site/docs/guides/providers.md","sourceDirName":"guides","slug":"/guides/providers","permalink":"/docs/guides/providers","draft":false,"unlisted":false,"editUrl":"https://github.com/Luc-cpl/orkestra/tree/main/docs/docs/guides/providers.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Controllers","permalink":"/docs/guides/controllers"},"next":{"title":"Entities","permalink":"/docs/guides/entities"}}');var s=i(4848),t=i(8453);const o={sidebar_position:2},a="Service Providers",c={},d=[{value:"Provider Interface",id:"provider-interface",level:2},{value:"Creating a Provider",id:"creating-a-provider",level:2},{value:"Provider Lifecycle",id:"provider-lifecycle",level:2},{value:"Registering Providers",id:"registering-providers",level:2},{value:"Provider Registration Rules",id:"provider-registration-rules",level:2},{value:"Service Container Integration",id:"service-container-integration",level:2},{value:"Service Registration Patterns",id:"service-registration-patterns",level:2},{value:"Basic Service Binding",id:"basic-service-binding",level:3},{value:"Complex Service Configuration",id:"complex-service-configuration",level:3},{value:"Service Decoration",id:"service-decoration",level:3},{value:"Common Provider Types",id:"common-provider-types",level:2},{value:"Feature Providers",id:"feature-providers",level:3},{value:"Infrastructure Providers",id:"infrastructure-providers",level:3},{value:"Integration Providers",id:"integration-providers",level:3},{value:"Testing Providers",id:"testing-providers",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Related Topics",id:"related-topics",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"service-providers",children:"Service Providers"})}),"\n",(0,s.jsx)(n.p,{children:"Service providers are the central place for all application bootstrapping. They are responsible for binding things into the service container, registering services, and booting various components."}),"\n",(0,s.jsx)(n.h2,{id:"provider-interface",children:"Provider Interface"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"ProviderInterface"})," defines the core methods that all providers must implement:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"use Orkestra\\App;\n\ninterface ProviderInterface\n{\n    public function register(App $app): void;\n    public function boot(App $app): void;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"creating-a-provider",children:"Creating a Provider"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"namespace App\\Providers;\n\nuse Orkestra\\App;\nuse Orkestra\\Interfaces\\ProviderInterface;\nuse App\\Services\\PaymentService;\nuse App\\Interfaces\\PaymentServiceInterface;\n\nclass PaymentServiceProvider implements ProviderInterface\n{\n    public function register(App $app): void\n    {\n        // Register services in the container\n        $app->bind(PaymentServiceInterface::class, PaymentService::class);\n\n        // Register a service with a custom factory\n        $app->bind('payment.config', function() use ($app) {\n            return [\n                'api_key' => $_ENV['PAYMENT_API_KEY'],\n                'secret' => $_ENV['PAYMENT_SECRET'],\n                'sandbox' => $app->config()->get('env') !== 'production'\n            ];\n        });\n    }\n\n    public function boot(App $app): void\n    {\n        // Initialize the payment service if needed\n        $service = $app->get(PaymentServiceInterface::class);\n        $service->initialize();\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"provider-lifecycle",children:"Provider Lifecycle"}),"\n",(0,s.jsx)(n.p,{children:"Providers follow a specific lifecycle within the application:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Registration"}),": Providers are registered with the application using ",(0,s.jsx)(n.code,{children:"$app->provider()"})," or through configuration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Register Phase"}),": The ",(0,s.jsx)(n.code,{children:"register()"})," method is called on all providers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Boot Phase"}),": After all providers are registered, the ",(0,s.jsx)(n.code,{children:"boot()"})," method is called on each provider in the order they were registered"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This separation allows providers to depend on services registered by other providers during the boot phase."}),"\n",(0,s.jsx)(n.h2,{id:"registering-providers",children:"Registering Providers"}),"\n",(0,s.jsxs)(n.p,{children:["Service providers are registered in your ",(0,s.jsx)(n.code,{children:"config/app.php"})," configuration file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"return [\n    'providers' => [\n        // Framework Service Providers\n        Orkestra\\Providers\\CommandsProvider::class,\n        Orkestra\\Providers\\HooksProvider::class,\n        Orkestra\\Providers\\HttpProvider::class,\n        Orkestra\\Providers\\ViewProvider::class,\n\n        // Application Service Providers\n        App\\Providers\\AuthServiceProvider::class,\n        App\\Providers\\PaymentServiceProvider::class,\n    ],\n];\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can also register providers manually in your application bootstrap code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"// Create the application\n$app = new Orkestra\\App(new Orkestra\\Configuration());\n\n// Register a provider\n$app->provider(MyServiceProvider::class);\n\n// Register multiple providers\n$app->provider(CommandsProvider::class);\n$app->provider(HooksProvider::class);\n$app->provider(HttpProvider::class);\n$app->provider(ViewProvider::class);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"provider-registration-rules",children:"Provider Registration Rules"}),"\n",(0,s.jsx)(n.p,{children:"When registering providers, be aware of these important rules:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Provider Must Exist"}),": The provider class must exist, or an ",(0,s.jsx)(n.code,{children:"InvalidArgumentException"})," will be thrown."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"// This will throw InvalidArgumentException\n$app->provider('NonExistentProvider');\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Provider Must Implement Interface"}),": The class must implement the ",(0,s.jsx)(n.code,{children:"ProviderInterface"}),", or an ",(0,s.jsx)(n.code,{children:"InvalidArgumentException"})," will be thrown."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"// This will throw InvalidArgumentException\n$nonProviderClass = new class () {};\n$app->provider($nonProviderClass::class);\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Registration Order Matters"}),": Providers are booted in the order they were registered. If Provider B depends on services from Provider A, register A first."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"service-container-integration",children:"Service Container Integration"}),"\n",(0,s.jsx)(n.p,{children:"Providers are themselves registered in the container, allowing them to be retrieved later:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"// Register a provider\n$app->provider(LogServiceProvider::class);\n\n// Get the provider instance from the container\n$provider = $app->get(LogServiceProvider::class);\n"})}),"\n",(0,s.jsx)(n.p,{children:"This is particularly useful for providers that maintain state or expose configuration:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"class LogServiceProvider implements ProviderInterface\n{\n    public array $channels = [];\n    \n    public function register(App $app): void\n    {\n        // Registration logic\n    }\n    \n    public function boot(App $app): void\n    {\n        $this->channels = [\n            'file' => new FileLogger(),\n            'database' => new DatabaseLogger(),\n        ];\n    }\n    \n    public function getChannel(string $name)\n    {\n        return $this->channels[$name] ?? null;\n    }\n}\n\n// Later in your application\n$logProvider = $app->get(LogServiceProvider::class);\n$fileLogger = $logProvider->getChannel('file');\n"})}),"\n",(0,s.jsx)(n.h2,{id:"service-registration-patterns",children:"Service Registration Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"basic-service-binding",children:"Basic Service Binding"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"public function register(App $app): void\n{\n    // Bind a class with autowiring (automatically resolve dependencies)\n    $app->bind(UserService::class, UserService::class);\n    \n    // Bind an interface to an implementation\n    $app->bind(UserRepositoryInterface::class, UserRepository::class);\n    \n    // Bind a closure factory\n    $app->bind('logger', function() {\n        return new Logger($_ENV['LOG_LEVEL'] ?? 'info');\n    });\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"complex-service-configuration",children:"Complex Service Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["For more complex service configuration, use the ",(0,s.jsx)(n.code,{children:"AppBind"})," class:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"public function register(App $app): void\n{\n    // Create a bind and configure it\n    $bind = new AppBind('mailer', MailerService::class);\n    \n    // Set constructor parameters\n    $bind->constructor('smtp', $_ENV['SMTP_HOST']);\n    \n    // Set public properties\n    $bind->property('debug', $_ENV['APP_DEBUG'] ?? false);\n    \n    // Call methods during instantiation\n    $bind->method('addChannel', 'email');\n    $bind->method('addRecipient', $_ENV['ADMIN_EMAIL']);\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"service-decoration",children:"Service Decoration"}),"\n",(0,s.jsx)(n.p,{children:"Service decoration allows you to wrap or modify a service without changing its core implementation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"public function register(App $app): void\n{\n    // Register the base service\n    $app->bind(CacheInterface::class, FileCache::class);\n    \n    // Decorate it with a Redis cache if available\n    if (extension_loaded('redis')) {\n        $app->decorate(CacheInterface::class, function($fileCache) {\n            return new RedisCache($fileCache); // Fallback to file cache if Redis fails\n        });\n    }\n    \n    // Add logging decoration in development\n    if ($app->config()->get('env') === 'development') {\n        $app->decorate(CacheInterface::class, function($cache) {\n            return new LoggingCacheDecorator($cache);\n        });\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"common-provider-types",children:"Common Provider Types"}),"\n",(0,s.jsx)(n.h3,{id:"feature-providers",children:"Feature Providers"}),"\n",(0,s.jsx)(n.p,{children:"Encapsulate a specific feature or module:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"class PaymentProvider implements ProviderInterface\n{\n    public function register(App $app): void\n    {\n        $app->bind(PaymentGatewayInterface::class, StripeGateway::class);\n        $app->bind(SubscriptionServiceInterface::class, SubscriptionService::class);\n    }\n    \n    public function boot(App $app): void\n    {\n        // Initialize payment webhooks\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"infrastructure-providers",children:"Infrastructure Providers"}),"\n",(0,s.jsx)(n.p,{children:"Provide infrastructure services like logging, caching, database connections:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"class DatabaseProvider implements ProviderInterface\n{\n    public function register(App $app): void\n    {\n        $app->bind('db', function() use ($app) {\n            $config = $app->config()->get('database');\n            return new DatabaseConnection($config);\n        });\n        \n        $app->bind(QueryBuilderInterface::class, QueryBuilder::class);\n    }\n    \n    public function boot(App $app): void\n    {\n        // Set up database connection pool\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"integration-providers",children:"Integration Providers"}),"\n",(0,s.jsx)(n.p,{children:"Integrate external services or libraries:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"class AwsProvider implements ProviderInterface\n{\n    public function register(App $app): void\n    {\n        $app->bind('aws.config', function() {\n            return [\n                'key' => $_ENV['AWS_KEY'],\n                'secret' => $_ENV['AWS_SECRET'],\n                'region' => $_ENV['AWS_REGION'] ?? 'us-east-1',\n            ];\n        });\n        \n        $app->bind(S3ClientInterface::class, function() use ($app) {\n            $config = $app->get('aws.config');\n            return new S3Client($config);\n        });\n    }\n    \n    public function boot(App $app): void\n    {\n        // Initialize AWS SDK\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"testing-providers",children:"Testing Providers"}),"\n",(0,s.jsx)(n.p,{children:"When testing providers, focus on verifying that services are properly registered and initialized:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"test('payment provider registers services', function () {\n    // Create a fresh app instance\n    $app = new App(new Configuration());\n    \n    // Register the provider\n    $app->provider(PaymentProvider::class);\n    \n    // Boot the app\n    $app->config()->set('env', 'development');\n    $app->config()->set('root', './');\n    $app->boot();\n    \n    // Verify services were registered\n    expect($app->has(PaymentGatewayInterface::class))->toBeTrue();\n    expect($app->get(PaymentGatewayInterface::class))->toBeInstanceOf(PaymentGateway::class);\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Keep Providers Focused"}),": Each provider should have a single responsibility. Create separate providers for distinct features."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Register in register(), Initialize in boot()"}),": Use the ",(0,s.jsx)(n.code,{children:"register()"})," method for binding services and the ",(0,s.jsx)(n.code,{children:"boot()"})," method for initializing them. Avoid using the ",(0,s.jsx)(n.code,{children:"boot()"})," method and ",(0,s.jsx)(n.strong,{children:"NEVER"})," get services or configuration from the container in the ",(0,s.jsx)(n.code,{children:"register()"})," method directly (you can use from callable bindings, configuration definitions, or callable bindings constructors arguments)."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Avoid Complex Logic in Providers"}),": Providers should mainly wire up services, not contain business logic."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use Interface Bindings"}),": Bind interfaces to implementations for better testability and loose coupling."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Document Provider Behavior"}),": Include clear documentation about what services a provider registers and initializes."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Test Provider Registration"}),": Write tests to ensure providers correctly register and initialize their services."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use Configuration Definitions"}),": Make your services adaptable to different environments by using configuration definitions."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"related-topics",children:"Related Topics"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/core-concepts/dependency-injection",children:"Dependency Injection"})," - Understand how the service container works"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/core-concepts/app-lifecycle",children:"Application Lifecycle"})," - Learn about the application bootstrap process"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/core-concepts/configuration-management",children:"Configuration"})," - Managing application configuration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/advanced-topics/testing",children:"Testing"})," - Testing Orkestra applications"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var r=i(6540);const s={},t=r.createContext(s);function o(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);