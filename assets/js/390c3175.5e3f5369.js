"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[448],{1322:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/orkestra/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"Getting Started","items":[{"type":"link","label":"Installation","href":"/orkestra/docs/getting-started/installation","docId":"getting-started/installation","unlisted":false},{"type":"link","label":"Configuration","href":"/orkestra/docs/getting-started/configuration","docId":"getting-started/configuration","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Core Concepts","items":[{"type":"link","label":"Application Lifecycle","href":"/orkestra/docs/core-concepts/app-lifecycle","docId":"core-concepts/app-lifecycle","unlisted":false},{"type":"link","label":"Dependency Injection","href":"/orkestra/docs/core-concepts/dependency-injection","docId":"core-concepts/dependency-injection","unlisted":false},{"type":"link","label":"Configuration Management","href":"/orkestra/docs/core-concepts/configuration-management","docId":"core-concepts/configuration-management","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Guides","items":[{"type":"link","label":"API Development","href":"/orkestra/docs/guides/api","docId":"guides/api","unlisted":false},{"type":"link","label":"Routing","href":"/orkestra/docs/guides/routing","docId":"guides/routing","unlisted":false},{"type":"link","label":"Controllers","href":"/orkestra/docs/guides/controllers","docId":"guides/controllers","unlisted":false},{"type":"link","label":"Service Providers","href":"/orkestra/docs/guides/providers","docId":"guides/providers","unlisted":false},{"type":"link","label":"Entities","href":"/orkestra/docs/guides/entities","docId":"guides/entities","unlisted":false},{"type":"link","label":"Service Decoration","href":"/orkestra/docs/guides/service-decoration","docId":"guides/service-decoration","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Advanced Topics","items":[{"type":"link","label":"Testing Orkestra Applications","href":"/orkestra/docs/advanced-topics/testing","docId":"advanced-topics/testing","unlisted":false},{"type":"link","label":"Troubleshooting Orkestra Applications","href":"/orkestra/docs/advanced-topics/troubleshooting","docId":"advanced-topics/troubleshooting","unlisted":false}],"collapsed":true,"collapsible":true}]},"docs":{"advanced-topics/testing":{"id":"advanced-topics/testing","title":"Testing Orkestra Applications","description":"This guide shows how to effectively test Orkestra applications using PHPUnit and Pest, with examples drawn from the framework\'s own test suite.","sidebar":"tutorialSidebar"},"advanced-topics/troubleshooting":{"id":"advanced-topics/troubleshooting","title":"Troubleshooting Orkestra Applications","description":"This guide covers common issues you might encounter while developing with Orkestra and provides solutions based on real-world scenarios. The troubleshooting tips are organized by component and error type.","sidebar":"tutorialSidebar"},"contributing/guidelines":{"id":"contributing/guidelines","title":"Contribution Guidelines","description":"We\'re excited that you\'re interested in contributing to Orkestra! This document outlines the process and guidelines for contributing to the project."},"core-concepts/app-lifecycle":{"id":"core-concepts/app-lifecycle","title":"Application Lifecycle","description":"Understanding the Orkestra application lifecycle is essential for properly leveraging the framework\'s capabilities. This guide covers the bootstrapping process, various lifecycle stages, and how to hook into these stages in your application.","sidebar":"tutorialSidebar"},"core-concepts/configuration-management":{"id":"core-concepts/configuration-management","title":"Configuration Management","description":"Orkestra provides a robust configuration system that allows you to define, validate, and manage application settings. This guide covers all aspects of the configuration system.","sidebar":"tutorialSidebar"},"core-concepts/dependency-injection":{"id":"core-concepts/dependency-injection","title":"Dependency Injection","description":"Orkestra includes a powerful Dependency Injection (DI) container built on PHP-DI, providing a clean and efficient way to manage class dependencies. This guide covers the core DI patterns used in Orkestra applications.","sidebar":"tutorialSidebar"},"getting-started/configuration":{"id":"getting-started/configuration","title":"Configuration","description":"Configuration in Orkestra is handled through the ConfigurationInterface and can be accessed through the App instance or directly via the interface.","sidebar":"tutorialSidebar"},"getting-started/installation":{"id":"getting-started/installation","title":"Installation","description":"Prerequisites","sidebar":"tutorialSidebar"},"guides/api":{"id":"guides/api","title":"API Development","description":"Orkestra follows PSR-15 for HTTP message handling and provides abstract controllers for building APIs.","sidebar":"tutorialSidebar"},"guides/controllers":{"id":"guides/controllers","title":"Controllers","description":"Orkestra controllers follow PSR-15 standards and support dependency injection for better testability and maintainability.","sidebar":"tutorialSidebar"},"guides/entities":{"id":"guides/entities","title":"Entities","description":"Orkestra AbstractEntities are simple data objects that represent your application\'s data structures.","sidebar":"tutorialSidebar"},"guides/providers":{"id":"guides/providers","title":"Service Providers","description":"Service providers are the central place for all application bootstrapping. They are responsible for binding things into the service container, registering services, and booting various components.","sidebar":"tutorialSidebar"},"guides/routing":{"id":"guides/routing","title":"Routing","description":"Orkestra provides a flexible and powerful routing system to handle HTTP requests and direct them to the appropriate controllers.","sidebar":"tutorialSidebar"},"guides/service-decoration":{"id":"guides/service-decoration","title":"Service Decoration","description":"Orkestra provides a powerful service decoration system that allows you to modify or extend the behavior of services without changing their original implementation. This guide explains how to use service decoration effectively.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Introduction to Orkestra","description":"Orkestra is a lightweight and highly extensible PHP framework designed to provide a flexible foundation for web development. With a focus on ease of service provider addition, extensibility, and maintaining high code quality, Orkestra empowers developers to build robust and scalable applications.","sidebar":"tutorialSidebar"},"license":{"id":"license","title":"License","description":"Orkestra is open-sourced software licensed under the MIT license."}}}}')}}]);